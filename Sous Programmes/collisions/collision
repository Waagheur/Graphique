const Object* collide (std::stack<glm::mat4> &matrices, const glm::vec3 &pos, const Object &Ob) {
	matrices.push(matrices.top() * Ob.matrix);
	glm::mat4 model = matrices.top();
	
	bool in = true;
	glm::vec3 u = glm::cross(glm::vec3(model * glm::vec4(Ob.hitBox[0], 1.0)) - glm::vec3(model * glm::vec4(Ob.hitBox[3], 1.0)), glm::vec3(model * glm::vec4(Ob.hitBox[0], 1.0)) - glm::vec3(model * glm::vec4(Ob.hitBox[4], 1.0)));
	glm::vec3 v = glm::cross(glm::vec3(model * glm::vec4(Ob.hitBox[0], 1.0)) - glm::vec3(model * glm::vec4(Ob.hitBox[1], 1.0)), glm::vec3(model * glm::vec4(Ob.hitBox[0], 1.0)) - glm::vec3(model * glm::vec4(Ob.hitBox[4], 1.0)));
	glm::vec3 w = glm::cross(glm::vec3(model * glm::vec4(Ob.hitBox[0], 1.0)) - glm::vec3(model * glm::vec4(Ob.hitBox[1], 1.0)), glm::vec3(model * glm::vec4(Ob.hitBox[0], 1.0)) - glm::vec3(model * glm::vec4(Ob.hitBox[3], 1.0)));
	if (dot(u, glm::vec3(model * glm::vec4(Ob.hitBox[0], 1.0))) < dot(u, glm::vec3(model * glm::vec4(Ob.hitBox[1], 1.0)))) {
		if ((dot(u, glm::vec3(model * glm::vec4(Ob.hitBox[0], 1.0))) < dot(u, pos)) && (dot(u, pos) < dot(u, glm::vec3(model * glm::vec4(Ob.hitBox[1], 1.0))))) {
		}
		else {
			in = false;
		}
	}
	else {
		if ((dot(u, glm::vec3(model * glm::vec4(Ob.hitBox[1], 1.0))) < dot(u, pos)) && (dot(u, pos) < dot(u, glm::vec3(model * glm::vec4(Ob.hitBox[0], 1.0))))) {
		}
		else {
			in = false;
		}
	}
	if (dot(v, glm::vec3(model * glm::vec4(Ob.hitBox[0], 1.0))) < dot(v, glm::vec3(model * glm::vec4(Ob.hitBox[3], 1.0)))) {
		if ((dot(v, glm::vec3(model * glm::vec4(Ob.hitBox[0], 1.0))) < dot(v, pos)) && (dot(v, pos) < dot(v, glm::vec3(model * glm::vec4(Ob.hitBox[3], 1.0))))) {
		}
		else {
			in = false;
		}
	}
	else {
		if ((dot(v, glm::vec3(model * glm::vec4(Ob.hitBox[3], 1.0))) < dot(v, pos)) && (dot(v, pos) < dot(v, glm::vec3(model * glm::vec4(Ob.hitBox[0], 1.0))))) {
		}
		else {
			in = false;
		}
	}
	if (dot(w, glm::vec3(model * glm::vec4(Ob.hitBox[0], 1.0))) < dot(w, glm::vec3(model * glm::vec4(Ob.hitBox[4], 1.0)))) {
		if ((dot(w, glm::vec3(model * glm::vec4(Ob.hitBox[0], 1.0))) < dot(w, pos)) && (dot(w, pos) < dot(w, glm::vec3(model * glm::vec4(Ob.hitBox[4], 1.0))))) {
		}
		else {
			in = false;
		}
	}
	else {
		if ((dot(w, glm::vec3(model * glm::vec4(Ob.hitBox[4], 1.0))) < dot(w, pos)) && (dot(w, pos) < dot(w, glm::vec3(model * glm::vec4(Ob.hitBox[0], 1.0))))) {
		}
		else {
			in = false;
		}
	}
	if (in) {
		return &Ob;
	}
	
	const Object* hit;
	for (int i = 0; i < Ob.children.size(); i++) {
		hit = collide(matrices, pos, *Ob.children.at(i));
		if (hit != NULL) {
			matrices.pop();
			return hit;
		}
	}
	
	matrices.pop();
	return NULL;
}

const Object* zonecollide (std::stack<glm::mat4>& matrices, const glm::vec3 &pos, const Zone &zone) {
	matrices.push(matrices.top() * zone.matrix);
	
	const Object* hit;
	for (int i = 0; i < zone.children.size(); i++) {
		hit = collide(matrices, pos, *zone.children.at(i));
		if (hit != NULL) {
			matrices.pop();
			return hit;
		}
	}
	matrices.pop();
	return NULL;
}

bool inzone (const glm::vec3 &pos, const Zone &zone) {
	bool in = true;
	glm::vec3 u = glm::cross(glm::vec3(zone.matrix * glm::vec4(zone.hitBox[0], 1.0)) - glm::vec3(zone.matrix * glm::vec4(zone.hitBox[3], 1.0)), glm::vec3(zone.matrix * glm::vec4(zone.hitBox[0], 1.0)) - glm::vec3(zone.matrix * glm::vec4(zone.hitBox[4], 1.0)));
	glm::vec3 v = glm::cross(glm::vec3(zone.matrix * glm::vec4(zone.hitBox[0], 1.0)) - glm::vec3(zone.matrix * glm::vec4(zone.hitBox[1], 1.0)), glm::vec3(zone.matrix * glm::vec4(zone.hitBox[0], 1.0)) - glm::vec3(zone.matrix * glm::vec4(zone.hitBox[4], 1.0)));
	glm::vec3 w = glm::cross(glm::vec3(zone.matrix * glm::vec4(zone.hitBox[0], 1.0)) - glm::vec3(zone.matrix * glm::vec4(zone.hitBox[1], 1.0)), glm::vec3(zone.matrix * glm::vec4(zone.hitBox[0], 1.0)) - glm::vec3(zone.matrix * glm::vec4(zone.hitBox[3], 1.0)));
	if (dot(u, glm::vec3(zone.matrix * glm::vec4(zone.hitBox[0], 1.0))) < dot(u, glm::vec3(zone.matrix * glm::vec4(zone.hitBox[1], 1.0)))) {
		if ((dot(u, glm::vec3(zone.matrix * glm::vec4(zone.hitBox[0], 1.0))) < dot(u, pos)) && (dot(u, pos) < dot(u, glm::vec3(zone.matrix * glm::vec4(zone.hitBox[1], 1.0))))) {
		}
		else {
			in = false;
		}
	}
	else {
		if ((dot(u, glm::vec3(zone.matrix * glm::vec4(zone.hitBox[1], 1.0))) < dot(u, pos)) && (dot(u, pos) < dot(u, glm::vec3(zone.matrix * glm::vec4(zone.hitBox[0], 1.0))))) {
		}
		else {
			in = false;
		}
	}
	if (dot(v, glm::vec3(zone.matrix * glm::vec4(zone.hitBox[0], 1.0))) < dot(v, glm::vec3(zone.matrix * glm::vec4(zone.hitBox[3], 1.0)))) {
		if ((dot(v, glm::vec3(zone.matrix * glm::vec4(zone.hitBox[0], 1.0))) < dot(v, pos)) && (dot(v, pos) < dot(v, glm::vec3(zone.matrix * glm::vec4(zone.hitBox[3], 1.0))))) {
		}
		else {
			in = false;
		}
	}
	else {
		if ((dot(v, glm::vec3(zone.matrix * glm::vec4(zone.hitBox[3], 1.0))) < dot(v, pos)) && (dot(v, pos) < dot(v, glm::vec3(zone.matrix * glm::vec4(zone.hitBox[0], 1.0))))) {
		}
		else {
			in = false;
		}
	}
	if (dot(w, glm::vec3(zone.matrix * glm::vec4(zone.hitBox[0], 1.0))) < dot(w, glm::vec3(zone.matrix * glm::vec4(zone.hitBox[4], 1.0)))) {
		if ((dot(w, glm::vec3(zone.matrix * glm::vec4(zone.hitBox[0], 1.0))) < dot(w, pos)) && (dot(w, pos) < dot(w, glm::vec3(zone.matrix * glm::vec4(zone.hitBox[4], 1.0))))) {
		}
		else {
			in = false;
		}
	}
	else {
		if ((dot(w, glm::vec3(zone.matrix * glm::vec4(zone.hitBox[4], 1.0))) < dot(w, pos)) && (dot(w, pos) < dot(w, glm::vec3(zone.matrix * glm::vec4(zone.hitBox[0], 1.0))))) {
		}
		else {
			in = false;
		}
	}
	return in;
}
